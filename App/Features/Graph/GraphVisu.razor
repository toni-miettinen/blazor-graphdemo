@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using VerticalSlice.Features.Graph.Domain
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Anchors

@rendermode InteractiveServer
@inherits ComponentBase

@page "/graph"

<PageTitle>Graph</PageTitle>

<h1>Graph example</h1>
<p>Green edge = cheap, Red edge = costly</p>

<div id="diagram-container" style="width: 100%; height: 512px; border: 1px solid black">
    @if (_isRendered)
    {
        <CascadingValue Value="_diagram" IsFixed="true">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    }
    else
    {
        <p>loading...</p>
    }
</div>

<p>
    Highlight Dijkstra from <span style="color:red">vertex</span>
    <select @onchange="FromChanged" id="pathFrom">
        @foreach (var vertice in _graph.Vertices)
        {
            <option value="@vertice.Label">@vertice.Label</option>
        }
    </select>
    to <span style="color:orange">vertex</span>
    <select @onchange="ToChanged" id="pathTo">
        @foreach (var vertice in _graph.Vertices)
        {
            <option value="@vertice.Label">@vertice.Label</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="CalculatePath">Calculate</button>
</p>

@code {
    private Graph _graph = GraphGenerators.ChatGPT(12, 4);
    private Vertex? _pathFrom;
    private Vertex? _pathTo;
    private bool _isRendered = false;
    private BlazorDiagram _diagram = new(new BlazorDiagramOptions
    {
        AllowMultiSelection = true,
        Zoom =
        {
            Enabled = true,
            ScaleFactor = 1.5,
        },
        Links =
        {
            DefaultRouter = new NormalRouter(),
            DefaultPathGenerator = new SmoothPathGenerator()
        },
    });

    private void FromChanged(ChangeEventArgs ev)
    {
        _pathFrom = _graph.GetVertex((string)ev.Value);
    }

    private void ToChanged(ChangeEventArgs ev)
    {
        _pathTo = _graph.GetVertex((string)ev.Value);
    }

    private void CalculatePath()
    {
        if (_pathFrom is null || _pathTo is null) return;
        VisuHelpers.CalculatePath(_pathFrom, _pathTo, _graph, _diagram);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized " + _isRendered);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"OnAfterRender {firstRender}");
        if (firstRender)
        {
            InitDiagram();
            _isRendered = true;
            StateHasChanged();
        }
    }

    private void InitDiagram()
    {
        Dictionary<string, NodeModel> nodeMap = new();
        foreach (var vertex in _graph.Vertices)
        {
            nodeMap.Add(vertex.Label, _diagram.Nodes.Add(new NodeModel
            {
                Title = vertex.Label
            }));
        }

        foreach (var edge in _graph.Edges)
        {
            var anchorFrom = new ShapeIntersectionAnchor(nodeMap[edge.From]);
            var anchorTo = new ShapeIntersectionAnchor(nodeMap[edge.To]);
            var l = _diagram.Links.Add(new LinkModel(anchorFrom, anchorTo));
            l.AddLabel(edge.Label);
            l.Color = VisuHelpers.GetGradientHex(edge.Cost);
        }

        //ArrangeNodesInCircle(Diagram.Nodes.ToList(), 100, 100, 250);
        VisuHelpers.ForceDirectLayout(
            _diagram,
            _graph.Edges.Select(x => (from: x.From, to: x.To)).ToList()
        );
        _diagram.ZoomToFit();
    }
}